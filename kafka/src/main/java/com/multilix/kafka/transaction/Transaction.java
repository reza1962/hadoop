/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.multilix.kafka.transaction;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Transaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transaction\",\"namespace\":\"com.multilix.kafka.transaction\",\"fields\":[{\"name\":\"fromIBAN\",\"type\":\"string\"},{\"name\":\"toIBAN\",\"type\":\"string\"},{\"name\":\"transactionTime\",\"type\":\"long\"},{\"name\":\"amount\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence fromIBAN;
  @Deprecated public java.lang.CharSequence toIBAN;
  @Deprecated public long transactionTime;
  @Deprecated public double amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Transaction() {}

  /**
   * All-args constructor.
   */
  public Transaction(java.lang.CharSequence fromIBAN, java.lang.CharSequence toIBAN, java.lang.Long transactionTime, java.lang.Double amount) {
    this.fromIBAN = fromIBAN;
    this.toIBAN = toIBAN;
    this.transactionTime = transactionTime;
    this.amount = amount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fromIBAN;
    case 1: return toIBAN;
    case 2: return transactionTime;
    case 3: return amount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fromIBAN = (java.lang.CharSequence)value$; break;
    case 1: toIBAN = (java.lang.CharSequence)value$; break;
    case 2: transactionTime = (java.lang.Long)value$; break;
    case 3: amount = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fromIBAN' field.
   */
  public java.lang.CharSequence getFromIBAN() {
    return fromIBAN;
  }

  /**
   * Sets the value of the 'fromIBAN' field.
   * @param value the value to set.
   */
  public void setFromIBAN(java.lang.CharSequence value) {
    this.fromIBAN = value;
  }

  /**
   * Gets the value of the 'toIBAN' field.
   */
  public java.lang.CharSequence getToIBAN() {
    return toIBAN;
  }

  /**
   * Sets the value of the 'toIBAN' field.
   * @param value the value to set.
   */
  public void setToIBAN(java.lang.CharSequence value) {
    this.toIBAN = value;
  }

  /**
   * Gets the value of the 'transactionTime' field.
   */
  public java.lang.Long getTransactionTime() {
    return transactionTime;
  }

  /**
   * Sets the value of the 'transactionTime' field.
   * @param value the value to set.
   */
  public void setTransactionTime(java.lang.Long value) {
    this.transactionTime = value;
  }

  /**
   * Gets the value of the 'amount' field.
   */
  public java.lang.Double getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /** Creates a new Transaction RecordBuilder */
  public static com.multilix.kafka.transaction.Transaction.Builder newBuilder() {
    return new com.multilix.kafka.transaction.Transaction.Builder();
  }
  
  /** Creates a new Transaction RecordBuilder by copying an existing Builder */
  public static com.multilix.kafka.transaction.Transaction.Builder newBuilder(com.multilix.kafka.transaction.Transaction.Builder other) {
    return new com.multilix.kafka.transaction.Transaction.Builder(other);
  }
  
  /** Creates a new Transaction RecordBuilder by copying an existing Transaction instance */
  public static com.multilix.kafka.transaction.Transaction.Builder newBuilder(com.multilix.kafka.transaction.Transaction other) {
    return new com.multilix.kafka.transaction.Transaction.Builder(other);
  }
  
  /**
   * RecordBuilder for Transaction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transaction>
    implements org.apache.avro.data.RecordBuilder<Transaction> {

    private java.lang.CharSequence fromIBAN;
    private java.lang.CharSequence toIBAN;
    private long transactionTime;
    private double amount;

    /** Creates a new Builder */
    private Builder() {
      super(com.multilix.kafka.transaction.Transaction.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.multilix.kafka.transaction.Transaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fromIBAN)) {
        this.fromIBAN = data().deepCopy(fields()[0].schema(), other.fromIBAN);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.toIBAN)) {
        this.toIBAN = data().deepCopy(fields()[1].schema(), other.toIBAN);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactionTime)) {
        this.transactionTime = data().deepCopy(fields()[2].schema(), other.transactionTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Transaction instance */
    private Builder(com.multilix.kafka.transaction.Transaction other) {
            super(com.multilix.kafka.transaction.Transaction.SCHEMA$);
      if (isValidValue(fields()[0], other.fromIBAN)) {
        this.fromIBAN = data().deepCopy(fields()[0].schema(), other.fromIBAN);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.toIBAN)) {
        this.toIBAN = data().deepCopy(fields()[1].schema(), other.toIBAN);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactionTime)) {
        this.transactionTime = data().deepCopy(fields()[2].schema(), other.transactionTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'fromIBAN' field */
    public java.lang.CharSequence getFromIBAN() {
      return fromIBAN;
    }
    
    /** Sets the value of the 'fromIBAN' field */
    public com.multilix.kafka.transaction.Transaction.Builder setFromIBAN(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.fromIBAN = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'fromIBAN' field has been set */
    public boolean hasFromIBAN() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'fromIBAN' field */
    public com.multilix.kafka.transaction.Transaction.Builder clearFromIBAN() {
      fromIBAN = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'toIBAN' field */
    public java.lang.CharSequence getToIBAN() {
      return toIBAN;
    }
    
    /** Sets the value of the 'toIBAN' field */
    public com.multilix.kafka.transaction.Transaction.Builder setToIBAN(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.toIBAN = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'toIBAN' field has been set */
    public boolean hasToIBAN() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'toIBAN' field */
    public com.multilix.kafka.transaction.Transaction.Builder clearToIBAN() {
      toIBAN = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'transactionTime' field */
    public java.lang.Long getTransactionTime() {
      return transactionTime;
    }
    
    /** Sets the value of the 'transactionTime' field */
    public com.multilix.kafka.transaction.Transaction.Builder setTransactionTime(long value) {
      validate(fields()[2], value);
      this.transactionTime = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'transactionTime' field has been set */
    public boolean hasTransactionTime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'transactionTime' field */
    public com.multilix.kafka.transaction.Transaction.Builder clearTransactionTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'amount' field */
    public java.lang.Double getAmount() {
      return amount;
    }
    
    /** Sets the value of the 'amount' field */
    public com.multilix.kafka.transaction.Transaction.Builder setAmount(double value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'amount' field has been set */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'amount' field */
    public com.multilix.kafka.transaction.Transaction.Builder clearAmount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Transaction build() {
      try {
        Transaction record = new Transaction();
        record.fromIBAN = fieldSetFlags()[0] ? this.fromIBAN : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.toIBAN = fieldSetFlags()[1] ? this.toIBAN : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.transactionTime = fieldSetFlags()[2] ? this.transactionTime : (java.lang.Long) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
